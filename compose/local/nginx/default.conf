# Generate wildcard self-signed certificate with very long validity (100 years):
# Create config file first:
# cat > /tmp/cert.conf <<EOF
# [req]
# distinguished_name = req_distinguished_name
# req_extensions = v3_req
# prompt = no
#
# [req_distinguished_name]
# C = US
# ST = State
# L = City
# O = Organization
# CN = *
#
# [v3_req]
# keyUsage = keyEncipherment, dataEncipherment
# extendedKeyUsage = serverAuth
# subjectAltName = @alt_names
#
# [alt_names]
# DNS.1 = *
# DNS.2 = localhost
# DNS.3 = *.localhost
# IP.1 = 127.0.0.1
# IP.2 = 0.0.0.0
# EOF
#
# Then generate certificate:
# openssl req -x509 -nodes -days 36500 -newkey rsa:2048 \
#   -keyout /etc/ssl/private/nginx-selfsigned.key \
#   -out /etc/ssl/certs/nginx-selfsigned.crt \
#   -config /tmp/cert.conf -extensions v3_req

server {
    listen 80;
    server_name 10.10.0.101;
    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name _;

    # SSL Certificate Configuration
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 10m;

    # Log files (inside container)
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # 1) API → Django
    location /api/ {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https; # Changed to https
        proxy_buffering off;
    }

    # 1b) Django Admin → Django
    location /admin/ {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_buffering off;
    }


    location /biometric/verification {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_buffering off;
    }


    # 2) Grafana UI under /monitor/
    location /monitor/ {
        proxy_pass http://grafana:3000;
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https; # Changed to https
        proxy_redirect off;
        proxy_buffering off;
    }

    # Redirect /monitor → /monitor/ (to normalize trailing slash)
    location = /monitor {
        return 301 https://$host/monitor/; # Changed to https
    }

    # 3) Static & media files
    location /static/ {
        alias /app/backend/static/;
        access_log off;
    }

    location /media/ {
        alias /app/backend/media/;
        access_log off;
    }

    # 4) Everything else → React app
    location / {
        root /app/frontend;
        try_files $uri $uri/ /index.html;
        access_log off;
    }
}